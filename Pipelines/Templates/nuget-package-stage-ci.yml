parameters:
  nugetPackageName: ''
  nugetPackageProjectFolder: ''

stages:
  - stage: check_for_${{ lower(parameters.nugetPackageName) }}_new_release_stage
    displayName: Check for ${{ parameters.nugetPackageName }} new Release Stage
    dependsOn: []
    condition: eq(variables['Build.Reason'], 'IndividualCI')
    jobs:
      - job: check_${{ lower(parameters.nugetPackageName) }}_package_version
        displayName: Check ${{ parameters.nugetPackageName }} Package Version
        steps:
          - task: PowerShell@2
            displayName: Retrieve latest ${{ parameters.nugetPackageName }} release version from private feed
            inputs:
              targetType: inline
              script: |
                $credential = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes(':$(System.AccessToken)'))

                $response = Invoke-RestMethod -Uri "https://feeds.dev.azure.com/DavidOrganization/_apis/packaging/Feeds/NuGetReferenceFeed/packages?api-version=6.0-preview.1" -Headers @{'Authorization' = 'Basic ' + $credential}
                
                $package = $response.value | where { $_.name -eq "${{ parameters.nugetPackageName }}" }
                
                if ($package -eq $null) { 
                  Write-Host "##[debug]This is a new NuGet package"
                  return
                }
                
                $packageVersions = Invoke-RestMethod -Uri "https://feeds.dev.azure.com/DavidOrganization/_apis/packaging/Feeds/NuGetReferenceFeed/Packages/$($package.id)/versions?api-version=6.0-preview.1" -Headers @{'Authorization' = 'Basic ' + $credential}
                
                $filteredVersions = $packageVersions.value | where { $_.version -match '^\d.\d.\d$' } | Sort-Object -Property publishDate -Descending
                
                if ($filteredVersions -eq $null) {
                  Write-Host "##[debug]Package found but no release version yet"
                  return
                }
                
                $latestVersion = $filteredVersions[0].version
                
                Write-Host "##[debug]Setting 'LatestVersion' to $($latestVersion)"
                Write-Host "##vso[task.setvariable variable=LatestVersion]$latestVersion"

          - task: PowerShell@2
            displayName: Check Current ${{ parameters.nugetPackageName }} Package Version
            name: CheckCurrentPackageVersion
            inputs:
              targetType: inline
              script: |
                $projectFile = [Xml] (Get-Content ${{ parameters.nugetPackageProjectFolder }}/${{ parameters.nugetPackageName }}.csproj)
                $currentVersion = $projectFile.Project.PropertyGroup.VersionPrefix

                if ("$(LatestVersion)" -eq $currentVersion) {
                  Write-Host "##[debug]Setting 'New Release' to False"
                  Write-Host "##vso[task.setvariable variable=NewRelease;isOutput=true]False"
                }
                else {
                  Write-Host "##[debug]Setting 'New Release' to True"
                  Write-Host "##vso[task.setvariable variable=NewRelease;isOutput=true]True"
                }

  - stage: publish_${{ lower(parameters.nugetPackageName) }}_release_nuget_package_stage
    displayName: Publish ${{ parameters.nugetPackageName }} Release Nuget Package Stage
    dependsOn: check_for_${{ lower(parameters.nugetPackageName) }}_new_release_stage
    condition: eq(dependencies.check_for_${{ lower(parameters.nugetPackageName) }}_new_release_stage.outputs['check_${{ lower(parameters.nugetPackageName) }}_package_version.CheckCurrentPackageVersion.NewRelease'], 'True')
    jobs:
      - job: publish_${{ lower(parameters.nugetPackageName) }}_release_nuget_package_job
        displayName: Publish ${{ parameters.nugetPackageName }} Release Nuget Package job
        steps:
          - task: UseDotNet@2
            displayName: Use .NET 6.x SDK
            inputs:
              version: 6.x

          - task: DotNetCoreCLI@2
            displayName: Pack ${{ parameters.nugetPackageName }}
            inputs:
              command: pack
              outputDir: $(Build.ArtifactStagingDirectory)
              packagesToPack: ${{ parameters.nugetPackageProjectFolder }}/${{ parameters.nugetPackageName }}.csproj

          - task: DotNetCoreCLI@2
            displayName: Publish ${{ parameters.nugetPackageName }} to NuGet Feed
            inputs:
              command: push
              searchPatternPush: $(Build.ArtifactStagingDirectory)/*.nupkg;!$(Build.ArtifactStagingDirectory)/*.Tests.nupkg
              feedPublish: NuGetReferenceFeed